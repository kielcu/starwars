<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Report or log an exception.
     *
     * @param  \Exception  $exception
     * @return void
     */
    public function report(Exception $exception)
    {
        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Exception  $exception
     * @return \Illuminate\Http\Response
     */
    public function render($request, Exception $exception)
    {
        if ($request->wantsJson()) {
            $this->apiException($request, $exception);
        }

        return parent::render($request, $exception);
    }
    protected function unauthenticated($request, AuthenticationException $exception)
    {
        if ($request->wantsJson()) {
            return response()->json(['error' => $exception->getMessage()], 401);
        }

        return parent::unauthenticated($request, $exception); // TODO: Change the autogenerated stub
    }

    private function apiException($request, Exception $exception)
    {
        if ($exception instanceof TokenException) {
            return response()->json(['error' => $exception->getMessage()], 401);
        }

        if($exception instanceof  UnauthorizedHttpException) {
            return response()->json(['error' => $exception->getMessage()], 401);
        }

        $code = 400;
        if ($exception->getCode() != "0") {
            $code = $exception->getCode();
        }

        return response()->json(['error' => $exception->getMessage()], $code);
    }
}
