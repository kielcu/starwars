<?php declare(strict_types=1);
/**
 * Created by PhpStorm.
 * User: Lukasz
 */

namespace Tests\Unit\app\Logic\StarWars\Planet;


use App\Logic\StarWars\Planet\PlanetStarWarsLogic;
use App\Services\StarWars\Response\Planets\PlanetsItemResponse;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Unit\app\Logic\StarWars\ClientServiceProvider;
use Tests\Unit\app\Logic\StarWars\DataMap;

class PlanetStarWarsLogicTest extends TestCase
{
    use RefreshDatabase, ClientServiceProvider;

    /** @var PlanetsItemResponse */
    private $planetItemResponse;

    /** @var PlanetStarWarsLogic */
    private $planetLogic;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->planetItemResponse = DataMap::map(DataMap::getPlanetsItem(), new PlanetsItemResponse());

        $this->planetLogic = app(PlanetStarWarsLogic::class);
    }

    /** @test */
    public function getByUrlAndSave_correct_url()
    {
        $mock = new MockHandler([
            new Response(200, [], DataMap::getPlanetsItem()),
        ]);

        $handler = HandlerStack::create($mock);

        $this->initClient($handler);

        $planet = $this->planetLogic->getByUrlAndSave('/test/1/');

        $this->assertNotNull($planet->id);
        $this->assertSame($this->planetItemResponse->name, $planet->name);
        $this->assertSame($this->planetItemResponse->climate, $planet->climate);
    }

    /** @test */
    public function getByUrlAndSave_wrong_url()
    {
        $mock = new MockHandler([
            new Response(200, [], DataMap::getNotFound()),
        ]);

        $handler = HandlerStack::create($mock);

        $this->initClient($handler);

        $planet = $this->planetLogic->getByUrlAndSave('/test/1');

        $this->assertNull($planet->id);
        $this->assertNull($planet->name);
        $this->assertNull($planet->climate);
    }

}