<?php declare(strict_types=1);
/**
 * Created by PhpStorm.
 * User: Lukasz
 */

namespace Tests\Unit\app\Logic\StarWars\Film;


use App\Logic\StarWars\Film\FilmStarWarsLogic;
use App\Models\Film;
use App\Services\StarWars\Response\Films\FilmsItemResponse;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Unit\app\Logic\StarWars\ClientServiceProvider;
use Tests\Unit\app\Logic\StarWars\DataMap;

class FilmStarWarsLogicTest extends TestCase
{
    use RefreshDatabase, ClientServiceProvider;

    /** @var FilmStarWarsLogic */
    protected $filmLogic;

    /** @var FilmsItemResponse */
    protected $filmItemResponse;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->filmItemResponse = DataMap::map(DataMap::getFilmsItem(), new FilmsItemResponse());

        $mock = new MockHandler([
            new Response(200, [], DataMap::getFilmsItem())
        ]);

        $handler = HandlerStack::create($mock);

        $this->initClient($handler);

        $this->filmLogic = app(FilmStarWarsLogic::class);
    }

    /** @test */
    public function getByArrayUrlAndSave_empty_urls()
    {
        $urls = [];
        $films = $this->filmLogic->getByArrayUrlAndSave(...$urls);

        $this->assertSame(0, $films->count());
    }

    /** @test */
    public function getByArrayUrlAndSave_wrong_urls()
    {
        $urls = ['test', 'test1'];
        $film = new Film();

        $films = $this->filmLogic->getByArrayUrlAndSave(...$urls);


        $this->assertSame(2, $films->count());
        $this->assertSame($film->id, $films->first()->id);
    }

    /** @test */
    public function getByArrayUrlAndSave_correct_urls()
    {
        $urls = ['test/1/', 'test/2/'];

        $films = $this->filmLogic->getByArrayUrlAndSave(...$urls);

        $this->assertSame(2, $films->count());
        $this->assertSame($this->filmItemResponse->title, $films->first()->title);
    }

    /** @test */
    public function getByUrlAndSave_correct_url()
    {
        $film = $this->filmLogic->getByUrlAndSave('asd/1/');

        $this->assertSame($film->title, $this->filmItemResponse->title);
        $this->assertSame($film->episode_id, $this->filmItemResponse->episode_id);
    }

    /** @test */
    public function getByUrlAndSave_wrong_url()
    {
        $film = $this->filmLogic->getByUrlAndSave('asd/a/');

        $this->assertNull($film->id);
        $this->assertNull($film->title);
        $this->assertNull($film->episode_id);
    }
}