<?php declare(strict_types=1);
/**
 * Created by PhpStorm.
 * User: Lukasz
 */

namespace Tests\Unit\app\Logic\StarWars\People;


use App\Logic\StarWars\Film\FilmStarWarsLogic;
use App\Logic\StarWars\People\PeopleRelationStarWarsLogic;
use App\Logic\StarWars\Planet\PlanetStarWarsLogic;
use App\Logic\StarWars\Species\SpeciesStarWarsLogic;
use App\Logic\StarWars\Starship\StarshipStarWarsLogic;
use App\Logic\StarWars\Vehicle\VehicleStarWarsLogic;
use App\Models\People;
use App\Models\Planet;
use App\Repositories\People\PeopleRepository;
use App\Services\StarWars\Response\People\PeopleItemResponse;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Mockery\Mock;
use Tests\TestCase;
use Tests\Unit\app\Logic\StarWars\ClientServiceProvider;
use Tests\Unit\app\Logic\StarWars\DataMap;

class PeopleRelationStarWarsLogicTest extends TestCase
{
    use RefreshDatabase, ClientServiceProvider;

    /** @var PeopleRelationStarWarsLogic */
    private $logic;

    /** @var PeopleItemResponse */
    private $peopleItemResponse;

    /** @var People */
    private $people;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->peopleItemResponse = DataMap::map(DataMap::getPeopleItem(), new PeopleItemResponse());
        $this->people = factory(People::class)->create();
    }

    /** @test */
    public function saveFilmsRelation()
    {
        $this->mock(FilmStarWarsLogic::class, function ($mock) {
            $mock->shouldReceive('getByArrayUrlAndSave')->once();
        });

        $this->mock(PeopleRepository::class, function($mock) {
            $mock->shouldReceive('saveFilms')->once();
        });

        $logic = app(PeopleRelationStarWarsLogic::class);
        $urls = ['/asd/1/'];

        $logic->saveFilmsRelation($this->people, ...$urls);
    }

    /** @test */
    public function saveVehiclesRelation()
    {
        $this->mock(VehicleStarWarsLogic::class, function ($mock) {
            $mock->shouldReceive('getByArrayUrlAndSave')->once();
        });

        $this->mock(PeopleRepository::class, function($mock) {
            $mock->shouldReceive('saveVehicles')->once();
        });

        $logic = app(PeopleRelationStarWarsLogic::class);
        $urls = ['/asd/1/'];

        $logic->saveVehiclesRelation($this->people, ...$urls);
    }

    /** @test */
    public function saveSpeciesRelation()
    {
        $this->mock(SpeciesStarWarsLogic::class, function ($mock) {
            $mock->shouldReceive('getByArrayUrlAndSave')->once();
        });

        $this->mock(PeopleRepository::class, function($mock) {
            $mock->shouldReceive('saveSpecies')->once();
        });

        $logic = app(PeopleRelationStarWarsLogic::class);
        $urls = ['/asd/1/'];

        $logic->saveSpeciesRelation($this->people, ...$urls);
    }

    /** @test */
    public function saveStarshipsRelation()
    {
        $this->mock(StarshipStarWarsLogic::class, function ($mock) {
            $mock->shouldReceive('getByArrayUrlAndSave')->once();
        });

        $this->mock(PeopleRepository::class, function($mock) {
            $mock->shouldReceive('saveStarships')->once();
        });

        $logic = app(PeopleRelationStarWarsLogic::class);
        $urls = ['/asd/1/'];

        $logic->saveStarshipsRelation($this->people, ...$urls);
    }

    /** @test */
    public function savePlanetRelation()
    {
        $this->mock(PlanetStarWarsLogic::class, function ($mock) {
            $mock->shouldReceive('getByUrlAndSave')
                ->once()
                ->andReturn(new Planet());
        });

        $this->mock(PeopleRepository::class, function($mock) {
            $mock->shouldReceive('update')->once();
        });

        $logic = app(PeopleRelationStarWarsLogic::class);
        $url = '/asd/1/';

        $logic->savePlanetRelation($this->people, $url);
    }
}