<?php declare(strict_types=1);
/**
 * Created by PhpStorm.
 * User: Lukasz
 */

namespace Tests\Unit\app\Logic\StarWars\People;


use App\Logic\StarWars\People\PeopleRelationStarWarsLogic;
use App\Logic\StarWars\People\PeopleStarWarsLogic;
use App\Models\People;
use App\Services\StarWars\Response\People\PeopleItemResponse;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Unit\app\Logic\StarWars\ClientServiceProvider;
use Tests\Unit\app\Logic\StarWars\DataMap;

class PeopleStarWarsLogicTest extends TestCase
{
    use RefreshDatabase, ClientServiceProvider;

    /** @var PeopleItemResponse */
    protected $peopleItemResponse;

    /** @var PeopleStarWarsLogic */
    private $peopleLogic;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->peopleItemResponse = DataMap::map(DataMap::getPeopleItem(), new PeopleItemResponse());

        $mock = new MockHandler([
            new Response(200, [], DataMap::getFilmsItem()),
            new Response(200, [], DataMap::getVehiclesItem()),
            new Response(200, [], DataMap::getSpeciesItem()),
            new Response(200, [], DataMap::getStarshipsItem()),
            new Response(200, [], DataMap::getPlanetsItem()),
        ]);

        $handler = HandlerStack::create($mock);

        $this->initClient($handler);

        $this->peopleLogic = app(PeopleStarWarsLogic::class);
    }

    protected function mockRelations()
    {
        $this->mock(PeopleRelationStarWarsLogic::class, function ($mock) {
            $mock->shouldReceive('saveFilmsRelation')->once();
            $mock->shouldReceive('saveVehiclesRelation')->once();
            $mock->shouldReceive('saveSpeciesRelation')->once();
            $mock->shouldReceive('saveStarshipsRelation')->once();
            $mock->shouldReceive('savePlanetRelation')->once();
        });

        $this->peopleLogic = app(PeopleStarWarsLogic::class);
    }

    /** @test */
    public function saveRelations_call_all_methods()
    {
        $this->mockRelations();

        $people = factory(People::class)->create();
        $this->peopleLogic->saveRelations($people, $this->peopleItemResponse);
    }

    /** @test */
    public function saveWithRelationsByPeopleItemResponse()
    {
        $this->mockRelations();

        $people = $this->peopleLogic->saveWithRelationsByPeopleItemResponse($this->peopleItemResponse);

        $this->assertSame($this->peopleItemResponse->name, $people->name);
        $this->assertSame($this->peopleItemResponse->height, $people->height);
    }

    /** @test */
    public function saveWithRelationsByPeopleItemResponse_empty_object_response()
    {
        $this->throwException(new \TypeError());

        $people = $this->peopleLogic->saveWithRelationsByPeopleItemResponse(new PeopleItemResponse());

        $this->assertNull($people->id);
        $this->assertNull($people->name);
        $this->assertNull($people->height);
    }
}