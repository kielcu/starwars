<?php declare(strict_types=1);
/**
 * Created by PhpStorm.
 * User: Lukasz
 */

namespace Tests\Feature\app\Http\Controllers\Api;


use App\Models\People;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PeopleControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        factory(People::class, 5)->create();
    }

    /** @test */
    public function response_status_ok()
    {
        $user = factory(User::class)->create();

        $response = $this->actingAs($user)
            ->get('api/people', [
                'Authorization' => "Bearer " . $user->api_token,
                'Accept' => 'application/json'
            ]);

        $response->assertStatus(200);
        $response->assertSuccessful();
    }

    /** @test */
    public function response_status_ok_for_filter_name()
    {
        $user = factory(User::class)->create();

        $testName = 'testName';
        factory(People::class)->create(['name' => $testName]);

        $response = $this->actingAs($user)
            ->get('api/people?name='.$testName, [
                'Authorization' => "Bearer " . $user->api_token,
                'Accept' => 'application/json'
            ]);

        $response->assertStatus(200);
        $response->assertSuccessful();
        $response->assertJsonStructure(['data']);
    }

    /** @test */
    public function request_has_not_header_application_json()
    {
        $user = factory(User::class)->create();

        $response = $this->actingAs($user)
            ->get('api/people', [
                'Authorization' => "Bearer " . $user->api_token
            ]);

        $response->assertJsonStructure([
            'error'
        ]);

        $response->assertStatus(400);
    }

    /** @test */
    public function request_for_unauthorized_user()
    {
        $response = $this->get('api/people', [
            'Accept' => 'application/json'
        ]);
        $response->assertStatus(401);
        $response->assertJsonStructure(['error']);
    }
}